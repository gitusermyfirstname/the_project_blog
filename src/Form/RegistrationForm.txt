<?php

namespace App\EventListener;
namespace App\Form;

use App\Entity\User;
use phpDocumentor\Reflection\Types\This;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
// use Symfony\Component\Mailer\Mailer;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\IsTrue;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\LessThan;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\NotEqualTo;
use Symfony\Component\Mime\Email;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Contracts\Service\Attribute\Required;

// use Symfony\Bridge\Twig\Mime\Email;

class RegistrationFormType extends AbstractType
{

    private MailerInterface $mailer;

    /**
     * @return static
     */
    #[Required]
    public function withMailer(MailerInterface $mailer): self
    {
        $new = clone $this;
        $new->mailer = $mailer;
        return $new;
    }

    // #[Required]
    // public function setMailer(MailerInterface $mailer): void
    // {
    //     $this->mailer = $mailer;
    // }

    public function buildForm(FormBuilderInterface $builder, array $options, ): void
    {
        $builder
            ->add('username', TextType::class, [
                'constraints' => [
                    new Length([
                        'min' => 3,
                        'minMessage' => 'Vous devez rentrez au moins {{ limit }} caractères'

                    ])
                ]
            ])
            ->add('adress', TextType::class, [
                'constraints' => [
                    new Length([
                        'min' => 3,
                        'minMessage' => 'Vous devez rentrez au moins {{ limit }} caractères'

                    ])
                ]
            ])
            ->add('codeAdress', IntegerType::class, [
                'constraints' => [
                    new NotEqualTo([
                        'value' => 0,
                    ]),
                    new LessThan([
                        'value' => 10000,
                    ]),
                ],
            ])
            ->add('city', TextType::class, [
                'constraints' => [
                    new Length([
                        'min' => 3,
                        'minMessage' => 'Vous devez rentrez au moins {{ limit }} caractères'

                    ])
                ]
            ])
            ->add('email')
            // ->add('agreeTerms', CheckboxType::class, [
            //     'mapped' => false,
            //     'constraints' => [
            //         new IsTrue([
            //             'message' => 'You should agree to our terms.',
            //         ]),
            //     ],
            // ])

            // add rôle
            
            ->add('plainPassword', PasswordType::class, [
                // instead of being set onto the object directly,
                // this is read and encoded in the controller
                'mapped' => false,
                'attr' => ['autocomplete' => 'new-password'],
                'constraints' => [
                    new NotBlank([
                        'message' => 'Please enter a password',
                    ]),
                    new Length([
                        'min' => 6,
                        'minMessage' => 'Your password should be at least {{ limit }} characters',
                        // max length allowed by Symfony for security reasons
                        'max' => 4096,
                    ]),
                ],
            ])
        ;

        $builder->addEventListener(
            FormEvents::SUBMIT,
                function (FormEvent $event) use ($options) {
                    $user = $event->getData();
                    $form = $event->getForm();
                    // $mailer = $options['mailer'];
                    $message =  (new Email())
                        ->from('envoye_de@example.com')
                        ->to('envoye_a@example.com')
                        // ->to($user->getEmail())
                        ->subject('Bienvenue')
                        ->text('Merci de vous être inscrit sur notre site');

                        $this->mailer->send($message);
                }
        );
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        //$resolver->setRequired('mailer');
        $resolver->setDefaults([
            'data_class' => User::class
        ]);
    }
}
